/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignUpImport } from './routes/sign-up'
import { Route as protectedImport } from './routes/__protected'
import { Route as authImport } from './routes/__auth'
import { Route as protectedIndexImport } from './routes/__protected.index'
import { Route as protectedSettingsImport } from './routes/__protected.settings'
import { Route as protectedMonitorImport } from './routes/__protected.monitor'
import { Route as authSignInImport } from './routes/__auth.sign-in'

// Create/Update Routes

const SignUpRoute = SignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const protectedRoute = protectedImport.update({
  id: '/__protected',
  getParentRoute: () => rootRoute,
} as any)

const authRoute = authImport.update({
  id: '/__auth',
  getParentRoute: () => rootRoute,
} as any)

const protectedIndexRoute = protectedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => protectedRoute,
} as any)

const protectedSettingsRoute = protectedSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => protectedRoute,
} as any)

const protectedMonitorRoute = protectedMonitorImport.update({
  id: '/monitor',
  path: '/monitor',
  getParentRoute: () => protectedRoute,
} as any)

const authSignInRoute = authSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => authRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/__auth': {
      id: '/__auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof authImport
      parentRoute: typeof rootRoute
    }
    '/__protected': {
      id: '/__protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof protectedImport
      parentRoute: typeof rootRoute
    }
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpImport
      parentRoute: typeof rootRoute
    }
    '/__auth/sign-in': {
      id: '/__auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInImport
      parentRoute: typeof authImport
    }
    '/__protected/monitor': {
      id: '/__protected/monitor'
      path: '/monitor'
      fullPath: '/monitor'
      preLoaderRoute: typeof protectedMonitorImport
      parentRoute: typeof protectedImport
    }
    '/__protected/settings': {
      id: '/__protected/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof protectedSettingsImport
      parentRoute: typeof protectedImport
    }
    '/__protected/': {
      id: '/__protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedIndexImport
      parentRoute: typeof protectedImport
    }
  }
}

// Create and export the route tree

interface authRouteChildren {
  authSignInRoute: typeof authSignInRoute
}

const authRouteChildren: authRouteChildren = {
  authSignInRoute: authSignInRoute,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

interface protectedRouteChildren {
  protectedMonitorRoute: typeof protectedMonitorRoute
  protectedSettingsRoute: typeof protectedSettingsRoute
  protectedIndexRoute: typeof protectedIndexRoute
}

const protectedRouteChildren: protectedRouteChildren = {
  protectedMonitorRoute: protectedMonitorRoute,
  protectedSettingsRoute: protectedSettingsRoute,
  protectedIndexRoute: protectedIndexRoute,
}

const protectedRouteWithChildren = protectedRoute._addFileChildren(
  protectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof protectedRouteWithChildren
  '/sign-up': typeof SignUpRoute
  '/sign-in': typeof authSignInRoute
  '/monitor': typeof protectedMonitorRoute
  '/settings': typeof protectedSettingsRoute
  '/': typeof protectedIndexRoute
}

export interface FileRoutesByTo {
  '': typeof authRouteWithChildren
  '/sign-up': typeof SignUpRoute
  '/sign-in': typeof authSignInRoute
  '/monitor': typeof protectedMonitorRoute
  '/settings': typeof protectedSettingsRoute
  '/': typeof protectedIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/__auth': typeof authRouteWithChildren
  '/__protected': typeof protectedRouteWithChildren
  '/sign-up': typeof SignUpRoute
  '/__auth/sign-in': typeof authSignInRoute
  '/__protected/monitor': typeof protectedMonitorRoute
  '/__protected/settings': typeof protectedSettingsRoute
  '/__protected/': typeof protectedIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/sign-up' | '/sign-in' | '/monitor' | '/settings' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/sign-up' | '/sign-in' | '/monitor' | '/settings' | '/'
  id:
    | '__root__'
    | '/__auth'
    | '/__protected'
    | '/sign-up'
    | '/__auth/sign-in'
    | '/__protected/monitor'
    | '/__protected/settings'
    | '/__protected/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authRoute: typeof authRouteWithChildren
  protectedRoute: typeof protectedRouteWithChildren
  SignUpRoute: typeof SignUpRoute
}

const rootRouteChildren: RootRouteChildren = {
  authRoute: authRouteWithChildren,
  protectedRoute: protectedRouteWithChildren,
  SignUpRoute: SignUpRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/__auth",
        "/__protected",
        "/sign-up"
      ]
    },
    "/__auth": {
      "filePath": "__auth.tsx",
      "children": [
        "/__auth/sign-in"
      ]
    },
    "/__protected": {
      "filePath": "__protected.tsx",
      "children": [
        "/__protected/monitor",
        "/__protected/settings",
        "/__protected/"
      ]
    },
    "/sign-up": {
      "filePath": "sign-up.tsx"
    },
    "/__auth/sign-in": {
      "filePath": "__auth.sign-in.tsx",
      "parent": "/__auth"
    },
    "/__protected/monitor": {
      "filePath": "__protected.monitor.tsx",
      "parent": "/__protected"
    },
    "/__protected/settings": {
      "filePath": "__protected.settings.tsx",
      "parent": "/__protected"
    },
    "/__protected/": {
      "filePath": "__protected.index.tsx",
      "parent": "/__protected"
    }
  }
}
ROUTE_MANIFEST_END */
